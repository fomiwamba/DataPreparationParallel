;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Input1: Liste der Messungen im AssetFolder\Input
; Task: Analyse und Extraktion von Features aus der Messungen, nach der Konfigurationsdatei im AssetFolder (xlsconfig)
; Output: Extrahierte Features aus der Messungen im AssetFolder\Output
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sequenz imc_logging "process_all_files started"

file_monitoring = 0; 1->basic feature extraction, 0-> deeper feature extraction
standard = 1 ; standard data analysis
SonderMessung = 0; sonder messung data analysis
sues = 0; ald, frf_mag,ph,coh to be calculated

;%%%%%%%%%%%%%%%%%%%%%%%%%%FromXLS_Config%%%%%%%%%%%%%%%%%%%%%%%%%%
tsleep = 10
t_red_factor = 1
CreateCSVFromEvent = 0 ; data export
parallel_processing = 0
sequenz search_item Asset_Props:Name "FE_parallel_processing"
if search_index <>0
	parallel_processing = tzuew (Asset_Props:Val[search_index],"a")
ende

sequenz search_item Asset_Props:Name "ExportEventDataAsCsv"
if search_index <>0
	CreateCSVFromEvent = tzuew (Asset_Props:Val[search_index],"a")
ende

sequenz search_item Asset_Props:Name "CalculateSuesFunctions"
if search_index <>0
	sues = tzuew (Asset_Props:Val[search_index],"a")
ende

sequenz search_item Asset_Props:Name "red_factor_time_per_signal"
if search_index <>0
	t_red_factor = tzuew (Asset_Props:Val[search_index],"a")
ende
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

; Filer files to analyze -> to be updated, pb with files not according to dirom_tdms, e.g. siplug
if 0
	sequenz FilterFilesToAnalyze; -> mm_max, IstFileList
ende

; Create List of already analyzed DatFiles
; input_measurement_file = filename (LoadMeasurementFile -> d7d, tdms, ,...
_txt = "Date_Time" +"-->"+"MeasFile"
FileNameList_file = output_verz +"\"+"FileNameList_FeatureExtraction.txt"; 
_fh = FileOpenASCII(FileNameList_file,2)
_err = FileLineWrite(_fh,_txt,0)
_err = FileClose(_fh)

_mm = 1
_mm_max = txArrayGetSize(IstFileList)
PnSetText("Files",tform(_mm_max,""))
SOLANGE _mm <= _mm_max ; for each raw measurement file

	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	;# Init / Open DatFile and Load Data
	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	file_ratio = floor(_mm/_mm_max*100) 
	seteinheit(file_ratio,"%",1)
	zeigen file_ratio
		
	PnDeleteItem("Channellist", 0)
	filename = IstFileList[_mm]
	filename_short = FsSplitPath(filename,2)
	PnSetText("File",filename_short)
	;PnSetText("FileNo",tform(_mm,""))

	;%%%%%%%%%%%%%%
	; LOAD FILE
	;%%%%%%%%%%%%%%
	;sequenz LoadMeasurementFile
	sequenz LoadSiplugCSVMeasurementFile
	;zeigen filename
	; input: filename
	; output: outputs: Data, Date_string, OP_Data, Feature
	Data_Channel = Data
	_anzKan_file = GrKanalZahl?(Data_Channel) 		;_anzKan = TxArrayGetSize(Ch_Config:SigName)
	Date_ist = Date_string
	entf Data
	
	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	; Store OPData to Static_Parameters_date_time.csv file 
	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	step_ = "Store Data"
	PnSetText("Step",step_)	
	PnSetText("FileNo",tform(_mm,"f1.0"))
	;PnSetText("Chs",tform(_anzKan,"f1.0")) 
	if GrKanalZahl?(Data_Channel) > 0
		output_verz_esa = output_verz; + "\ESA\"
		sicherungsfile_csv = output_verz_esa +"\"+"ESA_Parameter_"+Date_ist+".csv"; 
		_fileid = FileOpenAscii2(sicherungsfile_csv, "Parameter_TimeSeries",1)
		_err = FileObjWrite(_fileid,Data_Channel)
		_err = FileClose(_fileid)	
		;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		; protocol, that file loading is done correctly!
		;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		_txt = ZeitinText(ZeitSystem?(),3) +": " + input_measurement_file   + "-->" + sicherungsfile_csv
		_fh1 = FileOpenASCII(FileNameList_file,2)
		_err = FileLineWrite(_fh1,_txt,0)
		_err = FileClose(_fh1)
	ende

	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	; Start Python for Data Preparation for InfluxDB		
	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	sleep(5)
	inputfile = output_verz + "\current_file_dt.txt"
	_fh = FileOpenASCII(inputfile,1)
	_err = FileLineWrite(_fh,Date_ist,0)
	_err = FileClose(_fh)
	
	inputfile_list = output_verz + "\list_current_file_dt.txt"
	_fh = FileOpenASCII(inputfile_list,2)
	_err = FileLineWrite(_fh,Date_ist,0)
	_err = FileClose(_fh)
	
	step_ = "PrepareData2InfluxDB"
	PnSetText("Step",step_)	
	sequenz imc_logging "cadis_prepare_data_to_influxdb started"
	
	OpMode = "Manual"
	path_assetfolder_selected = "C:\BDA\AssetFolderSelected.txt"
	_fh = FileOpenASCII(path_assetfolder_selected,1)
	if _fh > 0
		_err = FileLineWrite(_fh,AssetFolder,0)
		_err = FileLineWrite(_fh,OpMode,0)
		_err = FileClose(_fh)
	sonst
		_err = FileErrCode?() 
		zeigen _err
	ende
	ret = Execute( "C:\BDA\AI\Start_PrepareData2InfluxDB.bat","" , "", 2,0)
	wenn ret < 0
		_erg = boxNachricht("Info","Problem with InfluxDB data preparation","!1")
	ende
	
	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	;Move InputFile (*.tdms, *.d7d, ...) to output
	;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		

	_outfolder = Raw_verz + "\"; +"\" + _jjjj +"\" + _mm +"\" + _dd +"\"; neu 20190319
	_status = FsCreateDirectory(_outfolder)
	wenn _status <>0
		_error = FsGetLastError()
	ende
	_outfile = _outfolder + FsSplitPath(input_measurement_file,4)
	_erg = FsMoveFile(input_measurement_file,_outfile,2,0)
		
	; move tdms_index
	_infile1 = input_measurement_file + "_index"
	_res = fsfileExists(_infile1)
	if _res = 1
		_outfile1 = _outfolder + FsSplitPath(input_measurement_file,4) + "_index"
		_erg = FsMoveFile(_infile1,_outfile1,2,0)
	ende
		
	; delete from FileList
	input_measurement_file_ = FsSplitPath(input_measurement_file,4)
	_idx = PnFindItem("FileList",input_measurement_file_); neu 201903198
	if _idx > 0
		PnDeleteItem("FileList",_idx); neu 201903198
	end

	
	_mm = _mm + 1
	;zeigen _mm
ENDE

cwselectmode("variable")
cwselectwindow(file_ratio)
CwAction("win.close")

cwselectmode("variable")
cwselectwindow(filename)
CwAction("win.close")

;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Start Python for Data Import to InfluxDB
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

output_folder = AssetFolder + "\Output\"
_cntfile = 1
while _cntfile > 0
	_filelist_mm = FsFileListNew(output_folder, "*.csv", 0, 0, 2)
	_cntfile = FsFileListGetCount(_filelist_mm)
	FsFileListClose(_filelist_mm)
ende

step_ = "ImportData2InfluxDB"
PnSetText("Step",step_)	
sequenz imc_logging "cadis_import_data_to_influx_db started"

OpMode = "Manual"
path_assetfolder_selected = "C:\BDA\AssetFolderSelected.txt"
_fh = FileOpenASCII(path_assetfolder_selected,1)
if _fh > 0
	_err = FileLineWrite(_fh,AssetFolder,0)
	_err = FileLineWrite(_fh,OpMode,0)
	_err = FileClose(_fh)
sonst
	_err = FileErrCode?() 
	zeigen _err
ende
ret = Execute( "C:\BDA\AI\Start_ImportData2InfluxDB.bat","" , "", 2,-1)

_file = "C:\BDA\Cadis_ImportData2Influxdb.txt"
Cadis_ImportData2Influxdb = fsfileexists(_file)
if Cadis_ImportData2Influxdb = 1
	step_ = "Data Preparation Completed"
else
	_erg = boxnachricht("Error","Import Data To InfluxDB!","S1")
	step_ = "Data Preparation not Completed"
end
PnSetText("Step",step_)	

DbClosePanel(0)

;DlgCloseDialog(0)

;entf _*
;if OpMode = "Auto_All"
;	DlgCloseDialog(0)
;	;Dialog( "C:\BDA\DataExploration\DataExploration.dlg", "", 0)
;ende
;if OpMode = "Manually"
;	DlgCloseDialog(0)
;	;Dialog( "C:\BDA\DataExploration\DataExploration.dlg", "", 0)
;else
;	DlgCloseDialog(0)
;ende





