sequenz imc_logging "build_esa_metrics started"

eps = 1e-3 ; vermeiden durch 0 zu dividieren -> Torque
if 1; from time signal
	_sig = FiltTP(I_sig0:[1],0,0,16,80); Band pass  or high pass filter to remove the dominating frequencies
	T_alle_0 = posiex(_sig,0)
	freqline = 1/(2*(diff(T_alle_0)))
else; from spectrum
	freqline = mean(U_freqline_vec)
end

SynchronousFrequency = freqline/Polpaar_np
SynchronousSpeed = SynchronousFrequency* 60
ESA_Metrics:UI_FrequencyLine = freqline
ESA_Metrics:UI_SynchronousFrequency = SynchronousFrequency

RotatingFrequency = SynchronousFrequency
RunningFrequency = RotatingFrequency
ESA_Metrics:UI_RotatingFrequency= RotatingFrequency
;ESA_Metrics:UI_RotatingSpeed = RotatingFrequency*60

wenn streamingfeatureextraction = 0 and transient = 0
	wenn ind_channelPuls = "None"
		RotatingFrequency = SynchronousFrequency;mean(I_rotfreq_vec)
	sonst
		RotatingFrequency = mitte(_drehzahl/60)
	ende

	idx = dlgGetSelectedItem("RotatingSpeedInput")
	_txt = DlgGetItemText("RotatingSpeedInput", idx)

	wenn tverg(_txt, "Auto") = 0
		wenn ind_channelPuls = "None"
			RotatingFrequency = SynchronousFrequency;mean(I_rotfreq_vec)
		sonst
			RotatingFrequency = mitte(_drehzahl/60)
		ende
	ende
	wenn tverg(_txt, "FromMotorNameplate") = 0
		RotatingFrequency = Speed_rpm_np/60
	ende
	wenn tverg(_txt, "FromTachoSignal") = 0
		RotatingFrequency = mitte(_drehzahl/60)
	ende
	wenn tverg(_txt, "FromDemodCurrentSpec") = 0
		RotatingFrequency = mean(I_rotfreq_vec)
	ende
	wenn tverg(_txt, "EqualToSynchSpeed") = 0
		RotatingFrequency = SynchronousFrequency;mean(U_synchfreq_vec)
	ende
	wenn tverg(_txt, "FromLoad") = 0
		DemandPowerW = 1/sqrt(3)*Abs(Mean(U_sig:[1]*I_sig:[1]+U_sig:[2]*I_sig:[2]+U_sig:[3]*I_sig:[3])); bzw. Pactive_Total (nach Vedat)
		MotorLoad% = DemandPowerW/Power_W_np * 100 ; (nach Vedat) -> output power as a percentage of rated power
		RunningSpeed_from_Load = SynchronousSpeed -  (SynchronousSpeed - Speed_rpm_np) * MotorLoad_% / 100
		RotatingFrequency_from_Load = RunningSpeed_from_Load/60
		RotatingFrequency =RotatingFrequency_from_Load
	ende
	wenn tverg(_txt, "FromUser") = 0
		RotatingFrequency = dlggetvalue("Speed_user_rpm")/60
	ende
	RunningFrequency = RotatingFrequency
	ESA_Metrics:UI_RotatingFrequency= RotatingFrequency
	;ESA_Metrics:UI_RotatingSpeed = RotatingFrequency*60
ende



if transient = 0
	; SF = Freqline - RS -> Slip Frequency
	SlipFrequency = SynchronousFrequency - RotatingFrequency
	ESA_Metrics:UI_SlipFrequency = SlipFrequency

	; PPF = SF*p -> Pole Pass Frequency
	;7.8.1.23.Pole pass frequency / Line frequency
	;This parameter indicates the ratio in dB of the line frequency to the side lines at the pole pass frequency
	;on the low-frequency current spectrum.
	PPF = SlipFrequency * Polpaar_np * 2
	ESA_Metrics:UI_PolPassFrequency= PPF

	; RotorBarPassFrequency
	RotorBarPassFrequency = RotatingFrequency * RotorBars_np
	ESA_Metrics:UI_RotorBarPassFrequency = RotatingFrequency * RotorBars_np
	; StatorSlotPassFrequency
	StatorSlotPassFrequency = RotatingFrequency * StatorSlots_np; -> RS * Popaar * Phases * integer  -> 6 * RS * Pol
	ESA_Metrics:UI_StatorSlotPassFrequency = RotatingFrequency * StatorSlots_np
ende

PowerFactoravg = ESA_Parameter:UI_PowerFactoravg
U_effavg = ESA_Parameter:U_effavg
I_effavg = ESA_Parameter:I_effavg

SynchronousFrequency = ESA_Metrics:UI_FrequencyLine
SynchronousSpeed = ESA_Metrics:UI_SynchronousFrequency*60
RunningSpeed = ESA_Metrics:UI_RotatingFrequency*60

method = 1
if method = 1
	DemandPowerW = Mean(1/sqrt(3)*Abs(U_sig:[1]*I_sig:[1]+U_sig:[2]*I_sig:[2]+U_sig:[3]*I_sig:[3])); bzw. Pactive_Total (nach Vedat)
	ApparentPowerVA = 1/sqrt(3)*(U_eff:[1]*I_eff:[1]+U_eff:[2]*I_eff:[2]+U_eff:[3]*I_eff:[3])
else
	DemandPowerW = U_effavg * I_effavg * PowerFactoravg * sqrt(3)
	ApparentPowerVA = U_effavg * I_effavg * sqrt(3)
end
PowerFactorCosPhi = DemandPowerW/ApparentPowerVA


; Motor efficiency
;The efficiency is calculated from a value table. The following parameters are used: 	;• Efficiency level	;• Enclosure	;• Load
if Efficiency_np <> 0
	;	Efficiency_% = function(EfficiencyLevel, Enclosure, Load_%)
	; EfficiencyLevel = {‘Standard’, ‘High’, ‘Energy’ or ‘Premium’.}
	; Enclosure = {ODP: Open, Drip-Proof motor or TEFC: Totally Enclosed, Fan-Cooled motor}
	;The efficiency is not calculated if the load is smaller than 50%.
	
	Efficiency% = Efficiency_np * 100
	MotorLoad% = Efficiency% * DemandPowerW / Power_W_np
	ESA_Metrics:UI_MotorLoad% = MotorLoad%
	
else; Efficiency = 100%
	
	; LOAD
	method = 1
	if method = 1; -> current and voltage
		MotorLoad%  = I_effavg/I_A_np * U_effavg/U_V_np *100
	elseif method = 2; -> slip method 
		MotorLoad% = (SynchronousSpeed - RunningSpeed)/(SynchronousSpeed - Speed_rpm_np) *100; Speed_rpm_np <-> 100% Load, RunningSpeed <-> Load
	elseif method = 3; Corrected Slip Method
		MotorLoad% = (SynchronousSpeed - RunningSpeed)/((SynchronousSpeed - Speed_rpm_np)*(U_effavg/U_V_np)^2) *100
	elseif method = 4
		MotorLoad% = DemandPower_W/Power_W_np * 100 ; (nach Vedat) -> output power as a percentage of rated power
		;Load = Demand power * Efficiency at rated load / Nameplate power.
	ende
	; Efficiency
	method = 1
	if method = 1
		Efficiency% = Power_W_np * MotorLoad% / (DemandPowerW + eps); / 100 -> eta = 0.7457 *hp *Load/Pi, 1hp = 745,7 W  = OutputPower/DemandPower
	elseif method = 2
		ESA_Metrics:ApparentPower_VA_np = U_V_np * I_A_np *  sqrt(3)
		ESA_Metrics:RealPower_W_np =ESA_Metrics:ApparentPower_VA_np * PowerFactor_np 
		Efficiency% = Power_W_np / ESA_Metrics:RealPower_W_np * 100		
	end
	
	if Efficiency% >= 100
		Efficiency% = 100
	ende
ende

	
;Mechanical Power or Output Power
method = 1
if method = 1
	OutputPowerW  = DemandPowerW*Efficiency%/100
else
	OutputPowerW = Power_W_np * MotorLoad%/100
ende
	
;Torque
OutputTorqueNm = OutputPowerW/(2*pi*RotatingFrequency + eps); Output torque = Output power / Rotation speed	P = M*2*pi*N
	
; Store Metrics
ESA_Metrics:UI_PowerFactorCosPhi = PowerFactorCosPhi
ESA_Metrics:UI_MotorLoad% = MotorLoad%
ESA_Metrics:UI_Efficiency% = Efficiency% 
ESA_Metrics:UI_DemandPowerW = DemandPowerW
ESA_Metrics:UI_ApparentPowerVA = ApparentPowerVA
ESA_Metrics:UI_OutputPowerW = OutputPowerW
ESA_Metrics:UI_OutputTorqueNm = OutputTorqueNm
ESA_Metrics:U_V_np_fu = freqline / freqline_Hz_np * U_V_np  

;wenn streamingfeatureextraction = 0
;	ESA_Metrics:RunningSpeed_from_Load = SynchronousSpeed -  (SynchronousSpeed - Speed_rpm_np) * MotorLoad_% / 100
;	ESA_Metrics:RotatingFrequency_from_Load = ESA_Metrics:RunningSpeed_from_Load/60
;	ESA_Metrics:SlipFrequency_from_Load = (MotorLoad_% /100 *  (SynchronousSpeed - Speed_rpm_np))/60
;ende

;sequenz update_tables